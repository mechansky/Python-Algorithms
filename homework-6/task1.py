"""
Задание 1.
Выполните профилирование памяти в скриптах
Проанализировать результат и определить программы с
наиболее эффективным использованием памяти.
Примечание: Для анализа возьмите любые 3-5 ваших РАЗНЫХ скриптов!
(хотя бы 3 разных для получения оценки отл).
На каждый скрипт вы должны сделать как минимум по две реализации.
Можно взять только домашние задания с курса Основ
или с текущего курса Алгоритмов
Результаты профилирования добавьте в виде комментариев к коду.
Обязательно сделайте аналитику (что с памятью в ваших скриптах, в чем ваша оптимизация и т.д.)
ВНИМАНИЕ: ЗАДАНИЯ, В КОТОРЫХ БУДУТ ГОЛЫЕ ЦИФРЫ ЗАМЕРОВ (БЕЗ АНАЛИТИКИ)
БУДУТ ПРИНИМАТЬСЯ С ОЦЕНКОЙ УДОВЛЕТВОРИТЕЛЬНО
Попытайтесь дополнительно свой декоратор используя ф-цию memory_usage из memory_profiler
С одновременным замером времени (timeit.default_timer())!
"""

from memory_profiler import profile


@profile
def func_1(number):
    lst = []
    lst_2 = []
    res = 0
    for element in range(1, number + 1):
        lst.append(element)
    for element in lst:
        if element % 2 == 0:
            lst_2.append(element)
        else:
            pass
    for element in lst_2:
        res += element
    print(res)


func_1(300000)


@profile
def func_2(number):
    res = sum([element for element in range(1, number + 1) if element % 2 == 0])
    print(res)


func_2(300000)

# функция выдает сумму всех четных чисел в приведенном юзером числе
# за счет того, что мы использовали встроенную функцию sum и list_comprehension, количество потребляемой памяти
# при большом первоначальном числе сильно экономится
# про время исполнения - без комментариев

